-- 8th Summer School on Formal Techniques
-- Menlo College, Atherton, California, US
--
-- 21-25 May 2018
--
-- Lecture 1: Introduction to Agda
--
-- File 1: The Curry-Howard Isomorphism

{-# OPTIONS --allow-unsolved-metas #-}

module Prelude where

-- Natural numbers as our first example of
-- an inductive data type.

data ‚Ñï : Set where -- set-input-method \bN
  zero : ‚Ñï
  suc  : (n : ‚Ñï) ‚Üí ‚Ñï

-- To use decimal notation for numerals, like
-- 2 instead of (suc (suc zero)), connect it
-- to the built-in natural numbers.

{-# BUILTIN NATURAL ‚Ñï #-}

-- Lists are a parameterized inductive data type.

data List (A : Set) : Set where
  []  : List A
  _‚à∑_ : (x : A) (xs : List A) ‚Üí List A   -- C-\ : :

infixr 6 _‚à∑_

-- C-c C-l   load

-- Disjoint sum type.

data _‚äé_ (S T : Set) : Set where  -- \uplus
  inl : S ‚Üí S ‚äé T
  inr : T ‚Üí S ‚äé T

infixr 4 _‚äé_

-- The empty sum is the type with 0 alternatives,
-- which is the empty type.
-- By the Curry-Howard-Isomorphism,
-- which views a proposition as the set/type of its proofs,
-- it is also the absurd proposition.

data False : Set where

‚ä•-elim : False ‚Üí {A : Set} ‚Üí A
‚ä•-elim ()


-- C-c C-SPC give
-- C-c C-, show hypotheses and goal
-- C-c C-. show hypotheses and infers type

-- Tuple types

-- The generic record type with two fields
-- where the type of the second depends on the value of the first
-- is called Sigma-type (or dependent sum), in analogy to
--
--   Œ£ ‚Ñï A =  Œ£   A(n) = A(0) + A(1) + ...
--           n ‚àà ‚Ñï

record Œ£ (A : Set) (B : A ‚Üí Set) : Set where  -- \GS  \Sigma
  constructor _,_
  field  fst : A
         snd : B fst
open Œ£

infixr 5 _,_

-- The non-dependent version is the ordinary Cartesian product.

_√ó_ : (S T : Set) ‚Üí Set
S √ó T = Œ£ S Œª _ ‚Üí T

infixr 5 _√ó_

-- The record type with no fields has exactly one inhabitant
-- namely the empty tuple record{}
-- By Curry-Howard, it corresponds to Truth, as
-- no evidence is needed to construct this proposition.

record True : Set where

test : True
test = record {}

-- example: distributivity  a ‚àß (b ‚à® c) ‚Üí (a ‚àß b) ‚à® (a ‚àß c)

dist : ‚àÄ{a b c : Set} ‚Üí a √ó (b ‚äé c) ‚Üí (a √ó b) ‚äé (a √ó c)
dist (a , inl b) = inl (a , b)
dist (a , inr c) = inr (a , c)

-- Relations

-- Type-theoretically, the type of relations ùìü(A√óA) is
--
--   A √ó A ‚Üí Prop
--
-- which is
--
--   A √ó A ‚Üí Set
--
-- by the Curry-Howard-Isomorphism
-- and
--
--   A ‚Üí A ‚Üí Set
--
-- by currying.

Rel : (A : Set) ‚Üí Set‚ÇÅ
Rel A = A ‚Üí A ‚Üí Set

-- Less-or-equal on natural numbers

_‚â§_ : Rel ‚Ñï
zero ‚â§ zero = True
zero ‚â§ suc y = True
suc x ‚â§ zero = False
suc x ‚â§ suc y = x ‚â§ y

-- C-c C-l load
-- C-c C-c case split
-- C-c C-, show goal and assumptions
-- C-c C-. show goal and assumptions and current term
-- C-c C-SPC give
